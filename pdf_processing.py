import numpy as np
import fitz  # PyMuPDF
import language_tool_python
from googletrans import Translator
from pythainlp.tokenize import word_tokenize
from pythainlp.spell import NorvigSpellChecker, spell
from pdf2image import convert_from_path
import pytesseract
import easyocr
import re  # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏™‡∏∏‡πà‡∏°
import os

# üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ ReportLab ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tesseract OCR (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Windows)
# pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
thai_spell_checker = NorvigSpellChecker()
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
tool = language_tool_python.LanguageTool('en-US')
translator = Translator()

# üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
FONT_PATH = "fonts/THSarabunNew.ttf"
POPPLER_PATH = r"C:\Users\User\poppler-24.08.0\Library\bin"  # üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path Poppler

def clean_ocr_text(text):
    """ ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏≠‡∏≠‡∏Å """
    cleaned_text = re.sub(r"[^‡∏Å-‡∏Æa-zA-Z0-9\s.,\n]", "", text)  # üî• ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    return cleaned_text

def extract_text_from_pdf(pdf_path, force_ocr=False):
    """ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ OCR ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) """
    doc = fitz.open(pdf_path)
    text = []
    
    if not force_ocr:  # ‚úÖ ‡πÉ‡∏ä‡πâ PyMuPDF ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ
        for page in doc:
            page_text = page.get_text("text").strip()
            if page_text:
                text.extend(page_text.split("\n"))
                return text  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ OCR)

    # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ OCR ‚Üí ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    images = convert_from_path(pdf_path, dpi=400, poppler_path=POPPLER_PATH)  # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° DPI
    reader = easyocr.Reader(['th', 'en'])

    for img in images:
        img_array = np.array(img)  # üî• ‡πÅ‡∏õ‡∏•‡∏á PIL ‡πÄ‡∏õ‡πá‡∏ô numpy array

        # üî• ‡πÉ‡∏ä‡πâ pytesseract OCR ‡∏Å‡∏±‡∏ö --psm 11 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏ó‡∏¢+‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        ocr_text = pytesseract.image_to_string(img, lang="tha+eng", config="--psm 11 --oem 3").strip()

        if len(ocr_text) < 10:  # üî• ‡∏ñ‡πâ‡∏≤ pytesseract ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ easyocr
            ocr_result = reader.readtext(img_array, detail=1)
            filtered_text = [text for (bbox, text, confidence) in ocr_result if confidence > 0.7]  # üî• ‡πÉ‡∏ä‡πâ threshold 70%
            ocr_text = "\n".join(filtered_text)

        # üî• ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
        ocr_text = clean_ocr_text(ocr_text)

        text.extend(ocr_text.split("\n"))

    return text

def detect_language(text):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© """
    return "th" if any("‡∏Å" <= ch <= "‡∏Æ" or "‡πê" <= ch <= "‡πô" for ch in text) else "en"

def correct_text(lines):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© """
    corrected_lines = []
    error_list = []

    for line_no, line in enumerate(lines, start=1):
        lang = detect_language(line)
        corrected_line = line

        if lang == "en":
            matches = tool.check(line)
            for match in matches:
                if match.replacements:
                    error_word = line[match.offset: match.offset + match.errorLength]
                    corrections = match.replacements
                    error_list.append((line_no, error_word, corrections))
        else:
            words = word_tokenize(line)
            unknown_words = [word for word in words if word not in spell(word)]
            for word in unknown_words:
                corrected_word = thai_spell_checker.correct(word)
                if corrected_word != word:
                    error_list.append((line_no, word, [corrected_word]))

        corrected_lines.append(corrected_line)

    return corrected_lines, error_list

def translate_text(lines, target_lang="th"):
    """ ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ """
    if not lines or not isinstance(lines, list):  # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô list
        return ["‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏• ‚ö†Ô∏è"]

    if all(not isinstance(line, str) or line.strip() == "" for line in lines):  # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        return ["‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏• ‚ö†Ô∏è"]

    text = " ".join(lines).replace("\n", " ")  # ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    translated = translator.translate(text, dest=target_lang)
    return translated.text.split("\n")  # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î


def save_text_to_pdf(text, output_path, font_path=FONT_PATH):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á PDF ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ """
    if not os.path.exists(font_path):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {font_path} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    pdfmetrics.registerFont(TTFont("CustomFont", font_path))

    doc = SimpleDocTemplate(output_path, pagesize=A4)
    styles = getSampleStyleSheet()
    styles["Normal"].fontName = "CustomFont"
    styles["Normal"].fontSize = 18
    styles["Normal"].leading = 25

    formatted_text = Paragraph(text.replace("\n", "<br/>"), styles["Normal"])
    doc.build([formatted_text])
